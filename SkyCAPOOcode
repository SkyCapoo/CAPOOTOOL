Max_version = 1.0 --最新的版本
announcement = [[1.0版本更新内容:
更新了房主-聯機-特殊-添加等功能
2024/8/31
]]
sponsor = [[
 1.何安  --1000台幣
 2.恒 --1000台幣
]]
CETrainer_CEMemo1.Lines.Text = announcement--公告
UDF2_CEMemo2.Lines.Text = sponsor--贊助者
-------------------------------------------------------------功能模塊----------------------------------------------------------------

function toSigned32(value) --負數修正
    if value >= 0x80000000 then
        return value - 0x100000000
    else
        return value
    end
end
function GameInject(exe)
    local game = exe
    local processID = getProcessIDFromProcessName(game)
    if processID ~= nil then
        openProcess(game)
    else
        messageDialog("進程不存在，請打開游戲重新嘗試", mtError)
    end
end
---------------------------------------------------------------檢測功能---------------------------------------------------------------
PROCESS_NAME = 'MiniGameApp.exe'
if not openProcess(PROCESS_NAME) then
    messageDialog("錯誤: 無法找到應用程式，請重新打開", mtError)
    closeCE()
    return
end
load
local PROCESS_NAME = 'MiniGameApp.exe'

local function getHostname()
    local handle = io.popen("hostname")
    if handle then
        local hostname = handle:read("*l")
        handle:close()
        return hostname:match("^%s*(.-)%s*$")
    else
        showMessage("錯誤: 無法取得電腦名稱！")
        closeCE()
        return nil
    end
end

local function isHostnameVip(hostname)
    local vipHostnames = {
         "LAPTOP-2QC5QJ83", "DESKTOP-E8IELO5", "ACER-Windows11", "DESKTOP-40AHL7Q", "DESKTOP-FISCPB3", "DESKTOP-PBPB7FV" --永久vip，svip
--,""--2024/9/30
--,""--2025/9/30
--,""--2025/9/30
    }
    for _, vipHostname in ipairs(vipHostnames) do
        if hostname == vipHostname then
            return true
        end
    end
    return false
end

local hostname = getHostname()

if hostname then
    isVip = isHostnameVip(hostname)

    if isVip then
    canusehack1 = 1
    else
    canusehack1 = 2
    end
else
    -- 如果无法获取主机名
    messageDialog("錯誤: 無法取得電腦名稱！", mtError)
    closeCE()
end



local miniuid = readInteger("[[libiworld.g_nHomeGardenSaveVersion+424]+C]+0")

if miniuid == nil then
    messageDialog("錯誤: 無法讀取記憶體,必須進入您的帳戶以檢查玩家ID", mtError)
    closeCE()
    return
end

-- VIP UID 列表
local vipUIDs = {1088712050, 1089142268, 1251995024, 1300614537, 1277719384}--玩家uid判斷
local isVipUID = false

for i = 1, #vipUIDs do
    if miniuid == vipUIDs[i] then
        isVipUID = true
        break
    end
end


if isVipUID and canusehack1 == 2 then
elseif not isVipUID and canusehack1 == 1 then
elseif isVipUID and canusehack1 == 1 then
else
    messageDialog("您不是使用者", mtError)
    closeCE()
    return
end

---------------------------------------------------------------版本檢測---------------------------------------------------------------
if Current_version < Max_version then
CETrainer.hide()
sleep(1000)
UDF3.show()
UDF3_CELabel3.Caption = "版本號 : v" .. Max_version
end
---------------------------------------------------------------界面功能---------------------------------------------------------------

 --Possible options: caHide, caFree, caMinimize, caNone
function UDF1_FormClose(sender)
if Current_version < Max_version then
closeCE()
return caFree
else
return caHide
end
end

function UDF2_FormClose(sender)
closeCE()
return caFree
end

function UDF3_FormClose(sender)
closeCE()
return caFree
end

function UDF1_CEButton2Click(sender) --確定按鈕
if Current_version < Max_version then
closeCE()
return caFree
else
UDF1.hide()
sleep(300)
CETrainer.show()
end
end


function UDF1_CEButton1Click(sender)
shellExecute("https://wwog.lanzouk.com/b00uyecn8d") --下載新版本
end


function CETrainer_CECustomButton2Click(sender)
if CETrainer_CECheckbox1.Checked == true then

--連接游戲
CETrainer_CECustomButton2.Enabled = false
GameInject("MiniGameApp.exe")
sleep(500)
CETrainer_CECustomButton2.Enabled = true
CETrainer.hide()
sleep(500)
UDF2.show()
UDF2_CEMemo1.Lines.Text = announcement --綫上公告
UDF2_CEMemo2.Lines.Text = sponsor--贊助者
myuid = readInteger("[[libiworld.g_nHomeGardenSaveVersion+424]+0C]+0")
hostuid = readInteger("[libSandboxEngine.g_WorldMgr]+8C")
pingg = readInteger("libSandboxEngine.RoomSyncResMgr::s_pInstance+32C")
fpss = readFloat("[libMiniBaseEngine.dll+91f120]+2C")
fps = string.format("%.1f", fpss)
UDF2_CEMemo1.Lines.Text = announcement
UDF2_CELabel1.Caption = "UID:  " .. myuid - 1000000000
if hostuid then
UDF2_CELabel2.Caption = "房主UID:  " .. hostuid - 1000000000
end
UDF2_CELabel3.Caption = "Ping:  " .. toSigned32(pingg)
UDF2_CELabel4.Caption = "FPS:  " .. fps
else
showMessage("請先閲讀[用戶使用協議]")
end
end

function UDF2_CEButton1Click(sender)
myuid = readInteger("[[libiworld.g_nHomeGardenSaveVersion+424]+0C]+0")
hostuid = readInteger("[libSandboxEngine.g_WorldMgr]+8C")
pingg = readInteger("libSandboxEngine.RoomSyncResMgr::s_pInstance+32C")
fpss = readFloat("[libMiniBaseEngine.dll+91f120]+2C")
fps = string.format("%.1f", fpss)
UDF2_CEMemo1.Lines.Text = announcement
UDF2_CELabel1.Caption = "UID:  " .. myuid - 1000000000
if hostuid then
UDF2_CELabel2.Caption = "房主UID:  " .. hostuid - 1000000000
end
UDF2_CELabel3.Caption = "Ping:  " .. toSigned32(pingg)
UDF2_CELabel4.Caption = "FPS:  " .. fps
end


function CETrainer_CECheckbox1Click(sender)
if CETrainer_CECheckbox1.Checked == true then
function showCustomMessage(title, message)
  -- 創建一個表單
  local form = createForm(false)
  form.Caption = title
  form.Width = 500
  form.Height = 130

  -- 創建一個標籤來顯示消息
  local label = createLabel(form)
  label.Caption = message
  label.Color = 0x00E9E9E9
  label.Align = 'alClient'
  label.WordWrap = true
  label.AutoSize = false
  label.Font.Size = 10
  label.Font.Name = 'Segoe UI'
  label.Font.Style = 'fsBold'
  label.Font.Color = 0x000000 -- 黑色文字

  -- 創建一個按鈕來關閉窗口
  local button = createButton(form)
  button.Caption = '確定'
  button.AnchorSideBottom.Control = form
  button.AnchorSideBottom.Side = asrBottom
  button.AnchorSideBottom.AnchorTo = 'bottom'
  button.AnchorSideRight.Control = form
  button.AnchorSideRight.Side = asrRight
  button.AnchorSideRight.AnchorTo = 'right'
  button.Top = form.Height - button.Height - 10
  button.Left = form.Width - button.Width - 10
  button.OnClick = function() form.close() end

  form.Position = 'poScreenCenter'
  form.BorderStyle = 'bsDialog'
  form.ShowModal()
end
local chatww =
[=[
1.我們的軟體安全無毒,使用過程中不能破環迷你世界正常遊戲 秩序,封號後果自負
2.本軟件僅供學習,請勿用於非法用途,違者後果自負,如有侵版倒 賣行為,請聯繫作者
]=]
showCustomMessage("用戶使用協議", chatww)
else

end
end

function UDF2_CEButton5Click(sender)
shellExecute("https://qm.qq.com/q/cYKztfFoXe")
end

function UDF2_CEButton6Click(sender)
shellExecute("https://discord.gg/jSwyC4kHvC")
end
function UDF2_CEButton8Click(sender)
UDF2.hide()
sleep(500)
CETrainer.show()
end

function UDF2_CEButton9Click(sender)
closeCE()
return caFree
end

function UDF2_CEButton7Click(sender)
UDF2_CEMemo1.Lines.Text = announcement --綫上公告
end

---------------------------------------------------------------人物屬性---------------------------------------------------------------
--writeInteger
--writeFloat

function UDF2_CECheckbox1Click(sender)
if UDF2_CECheckbox1.Checked == true then
writeFloat("[[libSandboxEngine.g_pPlayerCtrl]+280]+98",getProperty(UDF2_CEEdit5,"text"))
else
end
end

function UDF2_CECheckbox2Click(sender)
if UDF2_CECheckbox2.Checked == true then
if Freezehp then Freezehp.destroy(); Freezehp = nil end
Freezehp = createTimer(getMainForm())
Freezehp.interval = 100
Freezehp.OnTimer = function()
writeFloat("[[libSandboxEngine.g_pPlayerCtrl]+280]+94",getProperty(UDF2_CEEdit6,"text"))
end
else
if Freezehp then Freezehp.destroy(); Freezehp = nil end
end
end

function UDF2_CECheckbox3Click(sender)
if UDF2_CECheckbox3.Checked == true then
writeFloat("[[libSandboxEngine.g_pPlayerCtrl]+280]+22c",getProperty(UDF2_CEEdit7,"text"))
else
end
end

function UDF2_CECheckbox4Click(sender)
if UDF2_CECheckbox4.Checked == true then
if Freezehunger then Freezehunger.destroy(); Freezehunger = nil end
Freezehunger = createTimer(getMainForm())
Freezehunger.interval = 100
Freezehunger.OnTimer = function()
writeFloat("[[libSandboxEngine.g_pPlayerCtrl]+280]+220",getProperty(UDF2_CEEdit8,"text"))
end
else
if Freezehunger then Freezehunger.destroy(); Freezehunger = nil end
end
end

function UDF2_CECheckbox5Click(sender)
if UDF2_CECheckbox5.Checked == true then
writeFloat("[[libSandboxEngine.g_pPlayerCtrl]+280]+288",getProperty(UDF2_CEEdit9,"text"))
else
end
end

function UDF2_CECheckbox6Click(sender)
if UDF2_CECheckbox6.Checked == true then
if Freezestr then Freezestr.destroy(); Freezestr = nil end
Freezestr = createTimer(getMainForm())
Freezestr.interval = 100
Freezestr.OnTimer = function()
writeFloat("[[libSandboxEngine.g_pPlayerCtrl]+280]+280",getProperty(UDF2_CEEdit10,"text"))
end
else
if Freezestr then Freezestr.destroy(); Freezestr = nil end
end
end

function UDF2_CECheckbox7Click(sender)
if UDF2_CECheckbox7.Checked == true then
writeFloat("[[libSandboxEngine.g_pPlayerCtrl]+280]+a8",getProperty(UDF2_CEEdit11,"text"))
else
end
end

function UDF2_CECheckbox8Click(sender)
if UDF2_CECheckbox8.Checked == true then
jfhud = readFloat("[[libSandboxEngine.g_pPlayerCtrl]+280]+14C")
writeFloat("[[libSandboxEngine.g_pPlayerCtrl]+280]+14C",getProperty(UDF2_CEEdit12,"text"))
else
writeFloat("[[libSandboxEngine.g_pPlayerCtrl]+280]+14C",jfhud)
end
end

function UDF2_CECheckbox9Click(sender)
if UDF2_CECheckbox9.Checked == true then
jattack = readFloat("[[libSandboxEngine.g_pPlayerCtrl]+280]+144")
writeFloat("[[libSandboxEngine.g_pPlayerCtrl]+280]+144",getProperty(UDF2_CEEdit13,"text"))
else
writeFloat("[[libSandboxEngine.g_pPlayerCtrl]+280]+144",jattack)
end
end

function UDF2_CECheckbox10Click(sender)
if UDF2_CECheckbox10.Checked == true then
yfhud = readFloat("[[libSandboxEngine.g_pPlayerCtrl]+280]+155")
writeFloat("[[libSandboxEngine.g_pPlayerCtrl]+280]+155",getProperty(UDF2_CEEdit14,"text"))
else
writeFloat("[[libSandboxEngine.g_pPlayerCtrl]+280]+155",yfhud)
end
end

function UDF2_CECheckbox11Click(sender)
if UDF2_CECheckbox11.Checked == true then
yattack = readFloat("[[libSandboxEngine.g_pPlayerCtrl]+280]+148")
writeFloat("[[libSandboxEngine.g_pPlayerCtrl]+280]+148",getProperty(UDF2_CEEdit15,"text"))
else
writeFloat("[[libSandboxEngine.g_pPlayerCtrl]+280]+148",yattack)
end
end

---------------------------------------------------------------人物功能---------------------------------------------------------------

function UDF2_CECheckbox12Click(sender)
if UDF2_CECheckbox12.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(swuddi,libSandboxEngine.dll,76 ?? 0F 28 C8 F3 0F 10 45 ?? F3 0F 11 03) // should be unique
swuddi:
  db EB
registersymbol(swuddi)
]=])
else
autoAssemble([=[{$asm}
swuddi:
  db 76
unregistersymbol(swuddi)
]=])
end
end

function UDF2_CECheckbox13Click(sender)
if UDF2_CECheckbox13.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(INJECT,libSandboxEngine.dll,8B 41 34 35 AC D4 5F 38)
alloc(newmem,$1000)
label(code)
label(return)
newmem:
code:
  mov eax,#945804388
  xor eax,385FD4AC
  jmp return
INJECT:
  jmp newmem
  nop 3
return:
registersymbol(INJECT)
]=])
else
autoAssemble([=[{$asm}
INJECT:
  db 8B 41 34 35 AC D4 5F 38
unregistersymbol(INJECT)
dealloc(newmem)
]=])
end
end

function UDF2_CECheckbox14Click(sender)
if UDF2_CECheckbox14.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(cleanallmob,libSandboxEngine.dll,75 ?? 8B 06 FF 90 ?? ?? ?? ?? 8B 8E ?? ?? ?? ?? 6A ?? C7) // should be unique
cleanallmob:
  db EB 08
registersymbol(cleanallmob)
]=])
else
autoAssemble([=[{$asm}
cleanallmob:
  db 75 2A
unregistersymbol(cleanallmob)
]=])
end
end

function UDF2_CECheckbox15Click(sender)
if UDF2_CECheckbox15.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(Rockethack,libSandboxEngine.dll,83 BF ?? ?? ?? ?? 64 7D) // should be unique
Rockethack:
  db 83 87
registersymbol(Rockethack)
]=])
else
autoAssemble([=[{$asm}
Rockethack:
  db 83 BF
unregistersymbol(Rockethack)
]=])
end
end

function UDF2_CECheckbox16Click(sender)
if UDF2_CECheckbox16.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(nohunger,libSandboxEngine.dll,F3 0F 11 86 ?? ?? ?? ?? 76 ?? C7 86 ?? ?? ?? ?? 00 00 00 00 5E 5D C2) // should be unique
nohunger:
db 90 90 90 90 90 90 90 90
registersymbol(nohunger)
]=])
else
autoAssemble([=[{$asm}
nohunger:
movss [esi+220],xmm0
unregistersymbol(nohunger)
]=])
end
end

function UDF2_CECheckbox17Click(sender)
if UDF2_CECheckbox16.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(noneedoxy,libSandboxEngine.dll,F3 0F 11 87 ?? ?? ?? ?? 85 F6 0F 84) // should be unique
noneedoxy:
db 90 90 90 90 90 90 90 90
registersymbol(noneedoxy)
]=])
else
autoAssemble([=[{$asm}
noneedoxy:
movss [edi+140],xmm0
unregistersymbol(noneedoxy)
]=])
end
end

function UDF2_CECheckbox18Click(sender)
if UDF2_CECheckbox18.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(spownegg,libSandboxEngine.dll,01 47 ?? B9 ?? ?? ?? ?? 8B 47 ?? 99) // should be unique
registersymbol(spownegg)
alloc(newmem,100)
label(returnhere)
newmem:
mov [edi+8],#999999999
mov ecx,#20
jmp returnhere
spownegg:
jmp newmem
nop
nop
nop
returnhere:
]=])
else
autoAssemble([=[{$asm}
dealloc(newmem)
spownegg:
db 01 47 08
mov ecx,#20
unregistersymbol(spownegg)
]=])
end
end

function UDF2_CECheckbox19Click(sender)
if UDF2_CECheckbox19.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(speedegg,libSandboxEngine.dll,0F 8C ?? ?? ?? ?? E8 ?? ?? ?? ?? 6A ?? 8B C8 8B 10 FF 92 ?? ?? ?? ?? 6A) // should be unique
speedegg:
db 8D
registersymbol(speedegg)
]=])
else
autoAssemble([=[{$asm}
speedegg:
db 8C
unregistersymbol(speedegg)
]=])
end
end

function UDF2_CECheckbox20Click(sender)
if UDF2_CECheckbox20.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(respwonitem,libSandboxEngine.dll,75 0F 8B 06 8B CE FF 90 ?? ?? ?? ?? 5E 5D C2 ?? ?? 83) // should be unique
respwonitem:
  db EB
registersymbol(respwonitem)
]=])
else
autoAssemble([=[{$asm}
respwonitem:
  db 75
unregistersymbol(respwonitem)
]=])
end
end

function UDF2_CECheckbox21Click(sender)
if UDF2_CECheckbox21.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(hyack,libSandboxEngine.dll,FF 4C 37 ?? EB)
registersymbol(hyack)
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
newmem:
originalcode:
mov [edi+esi+08],#99999999
  dec [edi+esi+08]
  jmp libSandboxEngine.LivingAttrib::tick+1B0
exit:
jmp returnhere
hyack:
jmp newmem
nop
returnhere:
]=])
else
autoAssemble([=[{$asm}
dealloc(newmem)
hyack:
db FF 4C 37 08 EB 0E
unregistersymbol(hyack)
]=])
end
end

function UDF2_CECheckbox22Click(sender)
if UDF2_CECheckbox22.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(hyacke,libSandboxEngine.dll,FF 4C 37 ?? EB)
registersymbol(hyacke)
alloc(newmem,2048)
label(returnhere)
label(originalcode)
label(exit)
newmem:
originalcode:
mov [edi+esi+08],#0
dec [edi+esi+08]
jmp libSandboxEngine.LivingAttrib::tick+1B0
exit:
jmp returnhere
hyacke:
jmp newmem
nop
returnhere:
]=])
else
autoAssemble([=[{$asm}
dealloc(newmem)
hyacke:
db FF 4C 37 08 EB 0E
unregistersymbol(hyacke)
]=])
end
end


function UDF2_CEButton11Click(sender)
UDF2_CEEdit2.Text = string.format("%.1f",toSigned32(readInteger("[[libSandboxEngine.g_pPlayerCtrl]+270]+DC")) / 100)
UDF2_CEEdit3.Text = string.format("%.1f",toSigned32(readInteger("[[libSandboxEngine.g_pPlayerCtrl]+270]+E0")) / 100)
UDF2_CEEdit4.Text = string.format("%.1f",toSigned32(readInteger("[[libSandboxEngine.g_pPlayerCtrl]+270]+E4")) / 100)
end

function UDF2_CEButton10Click(sender)
autoAssemble([=[{$asm}
alloc(gotoX,8)
registersymbol(gotoX)
alloc(gotoY,8)
registersymbol(gotoY)
alloc(gotoZ,8)
registersymbol(gotoZ)
gotoX:
dd #1000
gotoY:
dd #700
gotoZ:
dd #1000
]=])
sleep(20)
writeInteger("gotoX",getProperty(UDF2_CEEdit2,"text") * 100)
writeInteger("gotoY",getProperty(UDF2_CEEdit3,"text") * 100)
writeInteger("gotoZ",getProperty(UDF2_CEEdit4,"text") * 100)
sleep(20)
autoAssemble([=[{$asm}
alloc(tpcall,256)
createthread(tpcall)
tpcall:
pushad
push [gotoZ]
push [gotoY]
push [gotoX]
mov ecx,[libSandboxEngine.g_pPlayerCtrl]
mov ecx,[ecx+270]
call libSandboxEngine.ActorLocoMotion::setPosition
popad
ret
]=])
sleep(100)
autoAssemble([=[{$asm}
dealloc(gotoX)
unregistersymbol(gotoX)
dealloc(gotoY)
unregistersymbol(gotoY)
dealloc(gotoZ)
unregistersymbol(gotoZ)
]=])
end


function UDF2_CECheckbox61Click(sender)
if UDF2_CECheckbox61.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(reachINJECT,libSandboxEngine.dll,75 ?? E8 ?? ?? ?? ?? 8B 40 ?? 6B)
alloc(newmem,$1000)
label(code)
label(return)
reachINJECT:
db 90 90
globalalloc(Reach,8)
label(code)
label(return)
Reach:
dd #999
newmem:
code:
  mov eax,[Reach]
  imul eax,eax,64
  jmp return
reachINJECT+7:
  jmp code
  nop
  nop
return:
registersymbol(reachINJECT)]=])
else
autoAssemble([=[{$asm}
reachINJECT+7:
  db 8B 40 4C 6B 40 68 64
unregistersymbol(reachINJECT)
dealloc(newmem)
reachINJECT:
db 75 1A
unregistersymbol(Reach)
dealloc(Reach)]=])
end
end
local theviewrech = 1
function UDF2_CECheckbox62Click(sender)
if UDF2_CECheckbox62.Checked == true then
  theviewrech = inputQuery("上帝視角距離", "輸入1正常距離，建議範圍1-10", theviewrech)
  if theviewrech == nil or theviewrech == "" then
    messageDialog("你取消了功能", mtError)
    return
  end
autoAssemble([=[{$asm}
aobscanmodule(godmodeview,libSandboxEngine.dll,F3 0F 59 97 B4 00 00 00 74)
alloc(newmem,$1000)
label(code)
label(return)
globalalloc(viewreach,8)
viewreach:
dd (Float)1.200000048
newmem:
code:
  mulss xmm2,[viewreach]
  jmp return
godmodeview:
  jmp newmem
  nop 3
return:
registersymbol(godmodeview)]=])
writeFloat("viewreach",theviewrech)
else
writeFloat("viewreach",1.200000048)
sleep(10)
autoAssemble([=[{$asm}
godmodeview:
  db F3 0F 59 97 B4 00 00 00
unregistersymbol(godmodeview)
dealloc(newmem)
dealloc(viewreach)]=])
end
end

function UDF2_CECheckbox63Click(sender)
if UDF2_CECheckbox63.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(INJECTbalcokfloor,libSandboxEngine.dll,75 35 8B 86 3C 02 00 00)
INJECTbalcokfloor:
db 74
registersymbol(INJECTbalcokfloor)]=])
else
autoAssemble([=[{$asm}
INJECTbalcokfloor:
  db 75
unregistersymbol(INJECTbalcokfloor)]=])
end
end

function UDF2_CECheckbox64Click(sender)
if UDF2_CECheckbox64.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(swimfly,libSandboxEngine.dll,0F 84 88 00 00 00 F3 0F 10 45)
alloc(newmem,$1000)
label(code)
label(return)
newmem:
code:
push ecx
mov ecx,[libSandboxEngine.g_pPlayerCtrl]
mov ecx,[ecx+270]
cmp ebx,ecx
pop ecx
  jne libSandboxEngine.ActorLocoMotion::handleWaterMovement+132
  jmp return
swimfly:
  jmp newmem
  nop
return:
registersymbol(swimfly)]=])
else
autoAssemble([=[{$asm}
swimfly:
  db 0F 84 88 00 00 00
unregistersymbol(swimfly)
dealloc(newmem)]=])
end
end


----------------------------------------------------時間天數-----------------------------------------

function UDF2_CEButton12Click(sender)
writeInteger("[libSandboxEngine.g_WorldMgr]+17C",(getProperty(UDF2_CEEdit16,"text")*24000)-23999)
end

function UDF2_CEButton13Click(sender)
writeInteger("[libSandboxEngine.g_WorldMgr]+180",(getProperty(UDF2_CEEdit17,"text")*1000)-6000)
end

function UDF2_CECheckbox23Click(sender)
if UDF2_CECheckbox23.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(locktime,libSandboxEngine.dll,89 86 80 01 00 00 74) // should be unique
registersymbol(locktime)
locktime:
  db 90 90 90 90 90 90
]=])
else
autoAssemble([=[{$asm}
locktime:
  db 89 86 80 01 00 00
unregistersymbol(locktime)
dealloc(locktime)
]=])
end
end
--------------------------------------------------聯機功能--------------------------------------------



function UDF2_CECheckbox24Click(sender)
if UDF2_CECheckbox24.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(infjump,libSandboxEngine.dll,80 B8 A4 00 00 00 00 74 5A) // should be unique
alloc(newmem,$1000)
label(code)
label(return)
newmem:
mov [eax+000000A4],#1
code:
  cmp byte ptr [eax+000000A4],00
  jmp return

infjump:
  jmp newmem
  nop 2
return:
registersymbol(infjump)
]=])
else
autoAssemble([=[{$asm}
infjump:
  db 80 B8 A4 00 00 00 00
unregistersymbol(infjump)
dealloc(newmem)
]=])
end
end

function UDF2_CECheckbox25Click(sender)
if UDF2_CECheckbox25.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(INJECTjump,libSandboxEngine.dll,74 ?? 8B 06 8B CE FF 90 ?? ?? ?? ?? 8B 45 ?? 5F)
INJECTjump:
  db 90 90
registersymbol(INJECTjump)
]=])
else
autoAssemble([=[{$asm}
INJECTjump:
  db 74 7A
unregistersymbol(INJECTjump)
]=])
end
end

function UDF2_CECheckbox26Click(sender)
if UDF2_CECheckbox26.Checked == true then
writeInteger("[libSandboxEngine.g_pPlayerCtrl]+23C",8)
autoAssemble([=[{$asm}
aobscanmodule(flyy,libSandboxEngine.dll,8B 86 3C 02 00 00 C1 E8 06 A8 01 0F 84) // should be unique
alloc(newmem,$1000)
label(code)
label(return)
newmem:
  mov [esi+0000023C],#8
code:
  mov eax,[esi+0000023C]
  jmp return

flyy:
  jmp newmem
  nop
return:
registersymbol(flyy)
]=])
writeInteger("[libSandboxEngine.g_pPlayerCtrl]+23C",8)
else
autoAssemble([=[{$asm}
flyy:
  db 8B 86 3C 02 00 00
unregistersymbol(flyy)
dealloc(newmem)
]=])
writeInteger("[libSandboxEngine.g_pPlayerCtrl]+23C",0)
end
end

function UDF2_CECheckbox27Click(sender)
if UDF2_CECheckbox27.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(InputHelperfly,libSandboxEngine.dll,74 ?? 8B 3D ?? ?? ?? ?? FF D7 8B 0D)
InputHelperfly:
  db 90 90
registersymbol(InputHelperfly)
]=])
else
autoAssemble([=[{$asm}

InputHelperfly:
  db 74 79
unregistersymbol(InputHelperfly)
]=])
end
end

function UDF2_CECheckbox28Click(sender)
if UDF2_CECheckbox28.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(INJECTqws,libSandboxEngine.dll,81 C9 00 20 00 00 83) // should be unique
INJECTqws:
  db 81 C9 00 90 00 00
registersymbol(INJECTqws)
aobscanmodule(Aobflynop,libSandboxEngine.dll,83 C9 10 8B C1)
Aobflynop:
db 90 90 90
registersymbol(Aobflynop)
]=])
else
autoAssemble([=[{$asm}
Aobflynop:
db 83 C9 10
INJECTqws:
  db 81 C9 00 20 00 00
unregistersymbol(Aobflynop)
unregistersymbol(INJECTqws)
]=])
end
end

function UDF2_CECheckbox29Click(sender)
if UDF2_CECheckbox29.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(lhcqpro,libSandboxEngine.dll,0F 84 06 0E 00 00) // should be unique
lhcqpro:
db 0F 85 06 0E 00 00
registersymbol(lhcqpro)
]=])
else
autoAssemble([=[{$asm}
lhcqpro:
  db 0F 84 06 0E 00 00
unregistersymbol(lhcqpro)
dealloc(lhcqpro)
]=])
end
end

function UDF2_CECheckbox30Click(sender)
if UDF2_CECheckbox30.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(lenjump,libSandboxEngine.dll,0F 84 ?? ?? ?? ?? 8A 54 24 ?? 84 D2)
lenjump:
db 0f 85
registersymbol(lenjump)
]=])
else
autoAssemble([=[{$asm}
lenjump:
db 0f 84
unregistersymbol(lenjump)
]=])
end
end

function UDF2_CECheckbox31Click(sender)
if UDF2_CECheckbox31.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(canmoveonstart,libSandboxEngine.dll,0F 84 ?? ?? ?? ?? 8B CF E8 ?? ?? ?? ?? 50 E8 ?? ?? ?? ?? 8B 48 ?? E8 ?? ?? ?? ?? 84 C0 75) // should be unique
canmoveonstart:
db 0F 85
registersymbol(canmoveonstart)
]=])
else
autoAssemble([=[{$asm}
canmoveonstart:
db 0F 84
unregistersymbol(canmoveonstart)
]=])
end
end

function UDF2_CECheckbox32Click(sender)
if UDF2_CECheckbox32.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(ICEskat,libSandboxEngine.dll,76 ?? F3 0F 10 0D ?? ?? ?? ?? F3 0F 11 4D ?? ?? ??)
ICEskat:
  db 90 90
registersymbol(iceskat)
]=])
else
autoAssemble([=[{$asm}
ICEskat:
  db 76 0D
unregistersymbol(ICEskat)
]=])
end
end

function UDF2_CECheckbox33Click(sender)
if UDF2_CECheckbox33.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(slowfalldown,libSandboxEngine.dll,0F 84 4D 01 00 00 8B 93)
slowfalldown:
db 0F 85
registersymbol(slowfalldown)
]=])
else
autoAssemble([=[{$asm}
slowfalldown:
db 0F 84
unregistersymbol(slowfalldown)
]=])
end
end

function UDF2_CECheckbox34Click(sender)
if UDF2_CECheckbox34.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(INJECTdf,libSandboxEngine.dll,0F 8E ?? 01 00 00 8B 45 ?? 8B 48 ?? 85 C9 74) // should be unique
INJECTdf:
  db 0F 85
registersymbol(INJECTdf)
]=])
else
autoAssemble([=[{$asm}
INJECTdf:
  db 0F 8E
unregistersymbol(INJECTdf)
dealloc(INJECTdf)
]=])
end
end

function UDF2_CECheckbox35Click(sender)
if UDF2_CECheckbox35.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(INJECTaspeedblcok,libSandboxEngine.dll,66 0F 6E 8B 88 03 00 00)
alloc(newmema,$1000)
label(codea)
label(returna)
newmema:
codea:
  mov [ebx+00000388],9999999
  jmp returna
INJECTaspeedblcok:
  jmp newmema
  nop 3
returna:
registersymbol(INJECTaspeedblcok)
aobscanmodule(INJECTnopspeedblock,libSandboxEngine.dll,C7 86 88 03 00 00 00 00 00 00 89)
alloc(newmem,$1000)
label(code)
label(return)
newmem:
code:
 nop
  jmp return
INJECTnopspeedblock:
  jmp newmem
  nop 5
return:
registersymbol(INJECTnopspeedblock)
]=])
else
autoAssemble([=[{$asm}
INJECTnopspeedblock:
  db C7 86 88 03 00 00 00 00 00 00
unregistersymbol(INJECTnopspeedblock)
dealloc(newmem)
INJECTaspeedblcok:
  db 66 0F 6E 8B 88 03 00 00
unregistersymbol(INJECTaspeedblcok)
dealloc(newmema)
]=])
end
end

function UDF2_CECheckbox36Click(sender)
if UDF2_CECheckbox36.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(INbrokeblock,libSandboxEngine.dll,89 86 8C 03 00 00 8B 45) // should be unique
alloc(newmem,$1000)
label(code)
label(return)
newmem:
  mov eax,#0
code:
  mov [esi+0000038C],eax
  jmp return
INbrokeblock:
  jmp newmem
  nop
return:
registersymbol(INbrokeblock)
]=])
else
autoAssemble([=[{$asm}
INbrokeblock:
  db 89 86 8C 03 00 00
unregistersymbol(INbrokeblock)
dealloc(newmem)
]=])
end
end
function UDF2_CECheckbox37Click(sender)
if UDF2_CECheckbox37.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(INJECTrideonair,libSandboxEngine.dll,88 83 A4 00 00 00 8B 44 24 10 80) // should be unique
alloc(newmem,$1000)
label(code)
label(return)
newmem:
code:
  mov [ebx+000000A4],01
  jmp return
INJECTrideonair:
  jmp newmem
  nop
return:
registersymbol(INJECTrideonair)
]=])
else
autoAssemble([=[{$asm}
INJECTrideonair:
  db 88 83 A4 00 00 00
unregistersymbol(INJECTrideonair)
dealloc(newmem)
]=])
end
end

function UDF2_CECheckbox38Click(sender)
if UDF2_CECheckbox38.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(fasteatall,libSandboxEngine.dll,2B CA 80 ?? ?? 00 00 00 0074 ?? 05 ?? ?? 00 00)
fasteatall:
db 90 90
registersymbol(fasteatall)
]=])
else
autoAssemble([=[{$asm}
fasteatall:
db 2B CA
unregistersymbol(fasteatall)
dealloc(fasteatall)
]=])
end
end

function UDF2_CECheckbox39Click(sender)
if UDF2_CECheckbox39.Checked == true then
autoAssemble([=[{$asm}

]=])
else
autoAssemble([=[{$asm}

]=])
end
end

function UDF2_CECheckbox40Click(sender)
if UDF2_CECheckbox40.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(qnocd,libSandboxEngine.dll,76 ?? E8 ?? ?? ?? ?? 56 8B CF E8 ?? ?? ?? ?? 6A)
qnocd:
db 77
registersymbol(qnocd)
]=])
else
autoAssemble([=[{$asm}
qnocd:
db 76
unregistersymbol(qnocd)
]=])
end
end

function UDF2_CECheckbox41Click(sender)
if UDF2_CECheckbox41.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(INwqJECT,libSandboxEngine.dll,C6 83 01 02 00 00 01)
INwqJECT:
db C6 83 01 02 00 00 00
registersymbol(INwqJECT)
aobscanmodule(INJECTnoclip,libSandboxEngine.dll,74 ?? 33 C9 8B ?? 38 ?? ?? ?? 00 00 0F 94 C1) // should be unique
alloc(newmem,$1000)
label(code)
label(return)
newmem:
code:
push ecx
mov ecx,[libSandboxEngine.g_pPlayerCtrl]
mov ecx,[ecx+270]//人物
cmp ebx,ecx
pop ecx
  jne libSandboxEngine.ActorLocoMotion::doMoveStep+287
  xor ecx,ecx
  mov edx,[ebx]
  jmp return
INJECTnoclip:
  jmp newmem
  nop
return:
registersymbol(INJECTnoclip)
]=])
else
autoAssemble([=[{$asm}
INJECTnoclip:
  db 74 56 33 C9 8B 13
unregistersymbol(INJECTnoclip)
dealloc(newmem)
INwqJECT:
db C6 83 01 02 00 00 01
unregistersymbol(INwqJECT)
]=])
end
end

function UDF2_CECheckbox42Click(sender)
if UDF2_CECheckbox42.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(infhgzua,libSandboxEngine.dll,89 BE ?? ?? ?? ?? 89 9E ?? ?? ?? ?? FF 90)
registersymbol(infhgzua)
infhgzua:
db 90 90 90 90 90 90 90 90 90 90 90 90

]=])
else
autoAssemble([=[{$asm}
infhgzua:
mov [esi+6F8],edi
mov [esi+6Fc],ebx
unregistersymbol(infhgzua)
]=])
end
end

function UDF2_CECheckbox43Click(sender)
if UDF2_CECheckbox43.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(asnsn,libSandboxEngine.dll,74 ?? 6A ?? EB ?? 6A ?? E8 ?? ?? ?? ?? 8B 8F) // should be unique
registersymbol(asnsn)
asnsn:
db EB
]=])
else
autoAssemble([=[{$asm}
asnsn:
db 74
unregistersymbol(asnsn)
]=])
end
end

function UDF2_CECheckbox44Click(sender)
if UDF2_CECheckbox44.Checked == true then
if Freezehightfly then Freezehightfly.destroy(); Freezehightfly = nil end
Freezehightfly = createTimer(getMainForm())
Freezehightfly.interval = 100
Freezehightfly.OnTimer = function()
writeFloat("[[libSandboxEngine.g_pPlayerCtrl]+270]+134",100)
end
else
if Freezehightfly then Freezehightfly.destroy(); Freezehightfly = nil end
end
end

function UDF2_CECheckbox45Click(sender)
if UDF2_CECheckbox45.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(asnssn,libSandboxEngine.dll,74 ?? C7 87 ?? ?? ?? ?? ?? ?? ?? ?? F3) // should be unique
registersymbol(asnssn)
asnssn:
db 90 90
]=])
else
autoAssemble([=[{$asm}
asnssn:
db 74 0A
unregistersymbol(asnssn)
]=])
end
end

function UDF2_CECheckbox47Click(sender)
if UDF2_CECheckbox47.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(INJECTaddhp,libSandboxEngine.dll,0F 85 F6 03 00 00 83)
INJECTaddhp:
db 90 90 90 90 90 90
registersymbol(INJECTaddhp)
]=])
else
autoAssemble([=[{$asm}
INJECTaddhp:
db 0F 85 F6 03 00 00
unregistersymbol(INJECTaddhp)
]=])
end
end

function UDF2_CECheckbox46Click(sender)
if UDF2_CECheckbox46.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(gamemodehome,libSandboxEngine.dll,83 B8 90 01 00 00 01 75 1F)
alloc(newmem,$1000)
label(code)
label(return)
alloc(homemode,8)
registersymbol(homemode)
newmem:
code:
cmp dword ptr [eax+00000190],01
push edi
lea edi,[eax+00000190]
mov [homemode],edi
pop edi
jmp return
gamemodehome:
  jmp newmem
  nop 2
return:
registersymbol(gamemodehome)
]=])
sleep(50)
writeInteger("[homemode]+0",1)
else
writeInteger("[homemode]+0",0)
sleep(50)
autoAssemble([=[{$asm}
gamemodehome:
  db 83 B8 90 01 00 00 01
unregistersymbol(gamemodehome)
dealloc(newmem)
unregistersymbol(homemode)
dealloc(homemode)
]=])
end
end


function UDF2_CECheckbox48Click(sender)
if UDF2_CECheckbox48.Checked == true then

autoAssemble([=[{$asm}
aobscanmodule(gamemodeTool,libSandboxEngine.dll,83 B9 6C 02 00 00 00)
alloc(newmem,$1000)
label(code)
label(return)
alloc(toolmode,8)
registersymbol(toolmode)
newmem:
code:
cmp dword ptr [ecx+0000026C],00
push edi
lea edi,[ecx+0000026C]
mov [toolmode],edi
pop edi
jmp return
gamemodeTool:
  jmp newmem
  nop 2
return:
registersymbol(gamemodeTool)
]=])
sleep(50)
writeInteger("[toolmode]+0",1)
else
writeInteger("[toolmode]+0",0)
sleep(50)
autoAssemble([=[{$asm}
gamemodeTool:
  db 83 B9 6C 02 00 00 00
unregistersymbol(gamemodeTool)
dealloc(newmem)
unregistersymbol(toolmode)
dealloc(toolmode)
]=])
end
end

function UDF2_CECheckbox49Click(sender)
if UDF2_CECheckbox49.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(gamemodeghost,libSandboxEngine.dll,83 BF 84 06 00 00 00 0F 84 AA) // should be unique
alloc(newmem,$1000)
label(code)
label(return)
alloc(ghostmode,8)
registersymbol(ghostmode)
newmem:
code:
cmp dword ptr [edi+00000684],00
push edi
lea edi,[edi+00000684]
mov [ghostmode],edi
pop edi
jmp return
gamemodeghost:
  jmp newmem
  nop 2
return:
registersymbol(gamemodeghost)
]=])
sleep(50)
writeInteger("[ghostmode]+0",2)
else
writeInteger("[ghostmode]+0",0)
sleep(50)
autoAssemble([=[{$asm}
gamemodeghost:
  db 83 BF 84 06 00 00 00
unregistersymbol(gamemodeghost)
dealloc(newmem)
unregistersymbol(ghostmode)
dealloc(ghostmode)
]=])
end
end

function UDF2_CEButton14Click(sender)
writeInteger("[libSandboxEngine.g_WorldMgr]+88",0)
end

function UDF2_CEButton15Click(sender)
writeInteger("[libSandboxEngine.g_WorldMgr]+88",1)
end

function UDF2_CEButton16Click(sender)
writeInteger("[libSandboxEngine.g_WorldMgr]+88",2)
end

function UDF2_CEButton17Click(sender)
writeInteger("[libSandboxEngine.g_WorldMgr]+88",3)
end

function UDF2_CEButton18Click(sender)
writeInteger("[libSandboxEngine.g_WorldMgr]+88",4)
end

function UDF2_CEButton19Click(sender)
writeInteger("[libSandboxEngine.g_WorldMgr]+88",5)
end

function UDF2_CEButton20Click(sender)
writeInteger("[libSandboxEngine.g_WorldMgr]+88",6)
end


function UDF2_CECheckbox50Click(sender)
if UDF2_CECheckbox50.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(hostfuckplayer,libSandboxEngine.dll,89 96 DC 00 00 00)
alloc(newmem,$1000)
label(code)
label(return)
newmem:
code:
mov edx,[[[libSandboxEngine.g_pPlayerCtrl]+270]+DC]
mov [esi+000000DC],edx
mov edi,[[[libSandboxEngine.g_pPlayerCtrl]+270]+E0]
mov [esi+000000E0],edi
mov ebx,[[[libSandboxEngine.g_pPlayerCtrl]+270]+E4]
mov [esi+000000E4],ebx
  jmp return
hostfuckplayer:
  jmp newmem
  nop
return:
registersymbol(hostfuckplayer)]=])
else
autoAssemble([=[{$asm}
hostfuckplayer:
  db 89 96 DC 00 00 00
unregistersymbol(hostfuckplayer)
dealloc(newmem)]=])
end
end

function UDF2_CECheckbox51Click(sender)
if UDF2_CECheckbox51.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(qtizondu,libSandboxEngine.dll,74 2? 8B ?F ?4 0? 00 00 E8 ?? ?? ?? ?? 85 C0)
registersymbol(qtizondu)
qtizondu:
 db 75]=])
else
autoAssemble([=[{$asm}
qtizondu:
  db 74
unregistersymbol(qtizondu)
dealloc(newmem)]=])
end
end

function UDF2_CECheckbox52Click(sender)
if UDF2_CECheckbox52.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(fireallandswimonair,libSandboxEngine.dll,66 C7 80 A6 00 00 00 00 00)
alloc(newmem,$1000)
label(code)
label(return)
newmem:
code:
  mov word ptr [eax+000000A6],0001
  jmp return
fireallandswimonair:
  jmp newmem
  nop 4
return:
registersymbol(fireallandswimonair)]=])
else
autoAssemble([=[{$asm}
fireallandswimonair:
  db 66 C7 80 A6 00 00 00 00 00
unregistersymbol(fireallandswimonair)
dealloc(newmem)]=])
end
end

function UDF2_CECheckbox53Click(sender)
if UDF2_CECheckbox53.Checked == true then
autoAssemble([=[{$asm}
alloc(capoo,100)
createthread(capoo)
capoo:
mov ecx,[libSandboxEngine.g_pPlayerCtrl]
cmp ecx,0
je Fun
pushad
push capoo
push #97
push #3
mov ecx,[libSandboxEngine.AttackJsonManager::Default_General_Swimming+1450]
call libSandboxEngine.World::setGameRule
popad
retn
Fun:
retn
]=])
autoAssemble([=[{$asm}
aobscanmodule(superlightning,libSandboxEngine.dll,8A 46 08 FF 4E 0C F3 0F 10 56 18)
superlightning:
DB 90 90 90
aobscanmodule(superlightning2,libSandboxEngine.dll,7B ?? 0F 2E C3 9F F6 C4)
superlightning2:
DB 7A]=])
else
autoAssemble([=[{$asm}
aobscanmodule(superlightning,libSandboxEngine.dll,90 90 90 FF 4E 0C F3 0F 10 56 18)
aobscanmodule(superlightning2,libSandboxEngine.dll,7A ?? 0F 2E C3 9F F6 C4)
superlightning:
DB 8A 46 08 FF 4E 0C
superlightning2:
DB 7B
unregistersymbol(superlightning)
dealloc(newmem)
unregistersymbol(superlightning2)
dealloc(newmem2)
 ]=])
autoAssemble([=[{$asm}
alloc(capoo,100)
createthread(capoo)
capoo:
mov ecx,[libSandboxEngine.g_pPlayerCtrl]
cmp ecx,0
je Fun
pushad
push capoo
push #10
push #3
mov ecx,[libSandboxEngine.AttackJsonManager::Default_General_Swimming+1450]
call libSandboxEngine.World::setGameRule
popad
retn
Fun:
retn
]=])
end
end

function UDF2_CECheckbox65Click(sender)
if UDF2_CECheckbox65.Checked == true then
autoAssemble([=[{$asm}
alloc(newmem,100)
label(returnhere)
newmem:
pushad
movss xmm1,[esi+90]
mov eax,[libSandboxEngine.g_pPlayerCtrl]
mov eax,[eax+280]
mov eax,[eax+90]
cmp [esi+90],eax
popad
jne long End
pushad
movss xmm1,[esi+94]
cmp [esi+94],0
popad
jnl Long End
pushad
push 0
push -1
push 0
push 2
mov ecx,[libSandboxEngine.g_pPlayerCtrl]
mov eax,libSandboxEngine.MpPlayerControl::revive
call eax
push 0
push -1
push 0
push 0
mov ecx,[libSandboxEngine.g_pPlayerCtrl]
mov eax,libSandboxEngine.MpPlayerControl::revive
call eax
popad
End:
jmp returnhere
libSandboxEngine.PlayerAttrib::tick+22:
jmp newmem
nop
nop
nop
returnhere:]=])
else
autoAssemble([=[{$asm}
dealloc(newmem)
libSandboxEngine.PlayerAttrib::tick+22:
db F3 0F 10 8E 94 00 00 00]=])
end
end



function UDF2_CECheckbox66Click(sender)
if UDF2_CECheckbox66.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(qxianass,libSandboxEngine.dll,F7 47 14 00 10 00 00)
alloc(newmem,$1000)
label(code)
label(return)
newmem:
  mov [edi+14],#8766
code:
  test [edi+14],00001000
  jmp return
qxianass:
  jmp newmem
  nop 2
return:
registersymbol(qxianass)
]=])
else
autoAssemble([=[{$asm}
qxianass:
  db F7 47 14 00 10 00 00
unregistersymbol(qxianass)
dealloc(newmem)
]=])
end
end


function UDF2_CECheckbox67Click(sender)
if UDF2_CECheckbox67.Checked == true then
autoAssemble([=[{$asm}
alloc(xxs,100)
createThread(xxs)
alloc(xh,4)
registersymbol(xh)
xxs:
mov ecx,[libSandboxEngine.g_pPlayerCtrl]
cmp ecx,0
je Fun
pushfd
mov eax,[esi]
mov ecx,[libSandboxEngine.g_pPlayerCtrl]
call libSandboxEngine.MpPlayerControl::tryWakeup
popfd
cmp [xh],#1
jne xxs
retn
Fun:
retn
]=])
else
autoAssemble([=[{$asm}
xh:
dd 1
dealloc(xxs)
]=])
end
end

--------------------------------------------------特殊功能--------------------------------------------

function UDF2_CECheckbox90Click(sender)
if UDF2_CECheckbox90.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(bulletjizon,libSandboxEngine.dll,76 ?? F3 0F 5C C1 F3 0F 59 41) // should be unique
bulletjizon:
db 77
registersymbol(bulletjizon)
]=])
else
autoAssemble([=[{$asm}
bulletjizon:
db 76
unregistersymbol(bulletjizon)
]=])
end
end

function UDF2_CECheckbox91Click(sender)
if UDF2_CECheckbox91.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(xxhzli,libSandboxEngine.dll,75 ?? 8B 88 ?? ?? ?? ?? F3) // should be unique
registersymbol(xxhzli)
xxhzli:
db 7D
]=])
else
autoAssemble([=[{$asm}
xxhzli:
db 75
unregistersymbol(xxhzli)
]=])
end
end
function UDF2_CECheckbox92Click(sender)
if UDF2_CECheckbox92.Checked == true then
autoAssemble([=[{$asm}
libSandboxEngine.GunLogical::getBulletNum+4:
DB 74 01
]=])
else
autoAssemble([=[{$asm}
libSandboxEngine.GunLogical::getBulletNum+4:
DB 75 01
]=])
end
end

function UDF2_CECheckbox93Click(sender)
if UDF2_CECheckbox93.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(fastchangebbullet,libSandboxEngine.dll,F3 0F 10 40 70 83)
alloc(newmem,$1000)
label(code)
label(return)
newmem:
code:
  nop
  jmp return
fastchangebbullet:
  jmp newmem
return:
registersymbol(fastchangebbullet)
]=])
else
autoAssemble([=[{$asm}
fastchangebbullet:
  db F3 0F 10 40 70
unregistersymbol(fastchangebbullet)
dealloc(newmem)
]=])
end
end
function UDF2_CECheckbox94Click(sender)
if UDF2_CECheckbox94.Checked == true then
autoAssemble([=[{$asm}
libSandboxEngine.PCControl::renderUI+476:
db 90 90 90 90 90 90
libSandboxEngine.GunLogical::update+2F:
db 77
libSandboxEngine.GunLogical::update+42:
db 46
libSandboxEngine.GunLogical::fireOnce+107:
DB 77
]=])
else
autoAssemble([=[{$asm}
libSandboxEngine.PCControl::renderUI+476:
db 0F 85 53 02 00 00
libSandboxEngine.GunLogical::update+2F:
db 76
libSandboxEngine.GunLogical::update+42:
db 56
libSandboxEngine.GunLogical::fireOnce+107:
DB 76
]=])
end
end

function UDF2_CEButton21Click(sender)
writeInteger("[[[libSandboxEngine.g_pPlayerCtrl]+5B8]+0]+46",getProperty(UDF2_CEEdit18,"text"))
end

function UDF2_CEButton22Click(sender)
writeInteger("[[[libSandboxEngine.g_pPlayerCtrl]+5B8]+0]+46",100)
end

function UDF2_RadioButton2Click(sender)
writeInteger("[[[libSandboxEngine.g_pPlayerCtrl]+5B8]+0]+84",0)
end

function UDF2_RadioButton3Click(sender)
writeInteger("[[[libSandboxEngine.g_pPlayerCtrl]+5B8]+0]+84",1)
end

function UDF2_RadioButton4Click(sender)
writeInteger("[[[libSandboxEngine.g_pPlayerCtrl]+5B8]+0]+84",2)
end

function UDF2_CECheckbox95Click(sender)
if UDF2_CECheckbox95.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(buttennofall,libSandboxEngine.dll,FF 4F ?? 8B CF E8 ?? ?? ?? ?? 50 FF)
registersymbol(buttennofall)
buttennofall:
db 90 90 90
]=])
else
autoAssemble([=[{$asm}
buttennofall:
db FF 4F 0C
unregistersymbol(buttennofall)
]=])
end
end

function UDF2_CECheckbox96Click(sender)
if UDF2_CECheckbox96.Checked == true then
autoAssemble([=[{$asm}
aobscanmodule(bulletaddmore,libSandboxEngine.dll,FF 4F 0C 8B CF)
alloc(newmem,$1000)
label(code)
label(return)
newmem:
code:
  inc [edi+0C]
  mov ecx,edi
  jmp return
bulletaddmore:
  jmp newmem
return:
registersymbol(bulletaddmore)
]=])
else
autoAssemble([=[{$asm}
bulletaddmore:
  db FF 4F 0C 8B CF
unregistersymbol(bulletaddmore)
dealloc(newmem)
]=])
end
end

function UDF2_RadioButton6Click(sender)
writeInteger("[[[libSandboxEngine.g_pPlayerCtrl]+5B8]+0]+80",0)
end

function UDF2_RadioButton7Click(sender)
writeInteger("[[[libSandboxEngine.g_pPlayerCtrl]+5B8]+0]+80",1)
end

function UDF2_RadioButton8Click(sender)
writeInteger("[[[libSandboxEngine.g_pPlayerCtrl]+5B8]+0]+80",2)
end

function UDF2_CEButton23Click(sender)
writeInteger("[[libSandboxEngine.g_pPlayerCtrl]+5B8]+0C",getProperty(UDF2_CEEdit19,"text"))
end

function UDF2_CEButton24Click(sender)
if not readInteger("bulletID") then
autoAssemble([=[{$asm}
aobscanmodule(changebutten,libSandboxEngine.dll,75 ?? 8B B0 ?? ?? ?? ?? 8B 49 ?? 56)
registersymbol(changebutten)
alloc(newmem,100)
label(returnhere)
alloc(bulletID,4)
registersymbol(bulletID)
bulletID:
dd #15003
newmem:
mov esi,[bulletID]//子弹ID
mov [eax+88],esi
mov esi,[eax+88]
jmp returnhere
changebutten:
jmp newmem
nop
nop
nop
returnhere:
]=])
end
sleep(50)
writeInteger("bulletID",getProperty(UDF2_CEEdit20,"text"))
writeInteger("[[[libSandboxEngine.g_pPlayerCtrl]+5B8]+0]+88",getProperty(UDF2_CEEdit20,"text"))
end

function UDF2_CEButton25Click(sender)
writeInteger("bulletID",15003)
writeInteger("[[[libSandboxEngine.g_pPlayerCtrl]+5B8]+0]+88",15003)
sleep(50)
if readInteger("bulletID") then
autoAssemble([=[{$asm}
changebutten:
db 75 06
mov esi,[eax+88]
dealloc(newmem)
unregistersymbol(changebutten)
dealloc(bulletID,4)
unregistersymbol(bulletID)
]=])
end
end

function UDF2_RadioButton10Click(sender)
writeInteger("[libiworld.MINIW::HotfixPkgLoader::HOTFIX_DOWNLOAD_CACHE_PATH+20C8]+838",0)
end

function UDF2_RadioButton11Click(sender)
writeInteger("[libiworld.MINIW::HotfixPkgLoader::HOTFIX_DOWNLOAD_CACHE_PATH+20C8]+838",3)
end

function UDF2_RadioButton12Click(sender)
writeInteger("[libiworld.MINIW::HotfixPkgLoader::HOTFIX_DOWNLOAD_CACHE_PATH+20C8]+838",2)
end

function UDF2_CECheckbox97Click(sender)
if UDF2_CECheckbox97.Checked == true then
backspeedmove =readFloat("[[libSandboxEngine.g_pPlayerCtrl]+280]+CC")
if Freezespeedmove then Freezespeedmove.destroy(); Freezespeedmove = nil end
Freezespeedmove = createTimer(getMainForm())
Freezespeedmove.interval = 100
Freezespeedmove.OnTimer = function()
writeFloat("[[libSandboxEngine.g_pPlayerCtrl]+280]+CC",getProperty(UDF2_CEEdit21,"text"))
end
else
if Freezespeedmove then Freezespeedmove.destroy(); Freezespeedmove = nil end
writeFloat("[[libSandboxEngine.g_pPlayerCtrl]+280]+CC",backspeedmove)
end
end

function UDF2_CECheckbox98Click(sender)
if UDF2_CECheckbox98.Checked == true then
backspeedrun =readFloat("[[libSandboxEngine.g_pPlayerCtrl]+280]+D0")
if Freezespeedrun then Freezespeedrun.destroy(); Freezespeedrun = nil end
Freezespeedrun = createTimer(getMainForm())
Freezespeedrun.interval = 100
Freezespeedrun.OnTimer = function()
writeFloat("[[libSandboxEngine.g_pPlayerCtrl]+280]+D0",getProperty(UDF2_CEEdit22,"text"))
end
else
if Freezespeedrun then Freezespeedrun.destroy(); Freezespeedrun = nil end
writeFloat("[[libSandboxEngine.g_pPlayerCtrl]+280]+D0",backspeedrun)
end
end

function UDF2_CECheckbox99Click(sender)
if UDF2_CECheckbox99.Checked == true then
backspeedsit =readFloat("[[libSandboxEngine.g_pPlayerCtrl]+280]+D4")
if Freezespeedsit then Freezespeedsit.destroy(); Freezespeedsit = nil end
Freezespeedsit = createTimer(getMainForm())
Freezespeedsit.interval = 100
Freezespeedsit.OnTimer = function()
writeFloat("[[libSandboxEngine.g_pPlayerCtrl]+280]+D4",getProperty(UDF2_CEEdit23,"text"))
end
else
if Freezespeedsit then Freezespeedsit.destroy(); Freezespeedsit = nil end
writeFloat("[[libSandboxEngine.g_pPlayerCtrl]+280]+D4",backspeedsit)
end
end

function UDF2_CECheckbox100Click(sender)
if UDF2_CECheckbox100.Checked == true then
backspeedswim =readFloat("[[libSandboxEngine.g_pPlayerCtrl]+280]+D8")
if Freezespeedswim then Freezespeedswim.destroy(); Freezespeedswim = nil end
Freezespeedswim = createTimer(getMainForm())
Freezespeedswim.interval = 100
Freezespeedswim.OnTimer = function()
writeFloat("[[libSandboxEngine.g_pPlayerCtrl]+280]+D8",getProperty(UDF2_CEEdit24,"text"))
end
else
if Freezespeedswim then Freezespeedswim.destroy(); Freezespeedswim = nil end
writeFloat("[[libSandboxEngine.g_pPlayerCtrl]+280]+D8",backspeedswim)
end
end

function UDF2_CECheckbox101Click(sender)
if UDF2_CECheckbox101.Checked == true then
backhightjump =readFloat("[[libSandboxEngine.g_pPlayerCtrl]+280]+DC")
if Freezehightjump then Freezehightjump.destroy(); Freezehightjump = nil end
Freezehightjump = createTimer(getMainForm())
Freezehightjump.interval = 100
Freezehightjump.OnTimer = function()
writeFloat("[[libSandboxEngine.g_pPlayerCtrl]+280]+DC",getProperty(UDF2_CEEdit25,"text"))
end
else
if Freezehightjump then Freezehightjump.destroy(); Freezehightjump = nil end
writeFloat("[[libSandboxEngine.g_pPlayerCtrl]+280]+DC",backhightjump)
end
end

function UDF2_CEButton26Click(sender)
backSkinID =readInteger("[[libiworld.g_nHomeGardenSaveVersion+424]+C]+64")
if FreezeSkinID then FreezeSkinID.destroy(); FreezeSkinID = nil end
FreezeSkinID = createTimer(getMainForm())
FreezeSkinID.interval = 100
FreezeSkinID.OnTimer = function()
writeInteger("[[libiworld.g_nHomeGardenSaveVersion+424]+C]+64",getProperty(UDF2_CEEdit26,"text"))
end
end



function UDF2_CEButton27Click(sender)
if FreezeSkinID then FreezeSkinID.destroy(); FreezeSkinID = nil end
writeInteger("[[libiworld.g_nHomeGardenSaveVersion+424]+C]+64",backSkinID)
end

--------------------------------------------------添加功能--------------------------------------------


function UDF2_CEButton28Click(sender)
autoAssemble([=[{$asm}
alloc(fztjID,4)
registersymbol(fztjID)
alloc(fztjSL,4)
registersymbol(fztjSL)
alloc(fztjNJ,4)
registersymbol(fztjNJ)
]=])
sleep(50)
writeInteger("fztjID",getProperty(UDF2_CEEdit27,"text"))
writeInteger("fztjSL",getProperty(UDF2_CEEdit28,"text"))
writeInteger("fztjNJ",getProperty(UDF2_CEEdit29,"text"))
sleep(10)
autoAssemble([=[{$asm}
alloc(SkyCapoo,512)
createthread(SkyCapoo)
SkyCapoo:
pushad
push 0
push 0
push 0
push 1
push 0
push -1
push [fztjNJ]
push [fztjSL]
push [fztjID]
mov ecx,[libSandboxEngine.g_pPlayerCtrl]
mov ecx,[ecx+56c]
mov ecx,[ecx+240]
mov ecx,[ecx+8]
mov ecx,[ecx+50]
mov eax,libSandboxEngine.BackPackGrid::setItem
call eax
popad
retn
]=])
autoAssemble([=[{$asm}
dealloc(fztjID)
unregistersymbol(fztjID)
dealloc(fztjSL)
unregistersymbol(fztjSL)
dealloc(fztjNJ)
unregistersymbol(fztjNJ)
]=])
end

function UDF2_CEButton29Click(sender)
UDF2_CEButton30.Visible=true
UDF2_CEButton29.Visible=false
autoAssemble([=[{$asm}
{$lua}
local aTimerInterval=100
local function aTimer_tick(timer)
if aTimer then
writeDouble("[hexvatphamtrongkho1]+0",readDouble("vatphamidok"))
writeDouble("[hexvatphamtrongkho2]+0",readDouble("vatphamidok"))
end
end
if syntaxcheck then return end
aTimer=createTimer(MainForm)
aTimer.Interval=aTimerInterval
aTimer.OnTimer=aTimer_tick
{$asm}
globalalloc(vatphamidok,8)
aobscanmodule(itemhackvip,liblua.dll,8B 02 8B 4A 04 8B 55)
alloc(newmem,$1000)
globalalloc(hexvatphamtrongkho1,8)
globalalloc(hexvatphamtrongkho2,8)
globalalloc(soluongvatpham,8)
globalalloc(chon1vatphambatkicotrongkho,8)
label(code3)
label(code2)
label(code1)
label(code)
label(return)
chon1vatphambatkicotrongkho:
dd #1086935552
soluongvatpham:
dd #0
hexvatphamtrongkho1:
dd 0
hexvatphamtrongkho2:
dd 0
vatphamidok:
dq (Double)12005
newmem:
push esi
cmp [hexvatphamtrongkho1],#0
je code1
cmp [hexvatphamtrongkho2],#0
je code2
code1:
cmp [soluongvatpham],#0
cmp [chon1vatphambatkicotrongkho],#0
jng codeend
cmp [hexvatphamtrongkho1],#0
jne codeend
mov esi,[soluongvatpham]
cmp [edx+24],esi
jne codeend
mov esi,[chon1vatphambatkicotrongkho]
cmp [edx+4],esi
jne codeend
mov [hexvatphamtrongkho1],edx
mov esi,[edx+4]
mov [chon1vatphambatkicotrongkho],esi
jmp codeend
code2:
cmp [soluongvatpham],#0
cmp [chon1vatphambatkicotrongkho],#0
jng codeend
cmp [hexvatphamtrongkho2],#0
jne codeend
mov esi,[soluongvatpham]
cmp [edx+24],esi
jne codeend
mov esi,[hexvatphamtrongkho1]
cmp esi,edx
jg code3
jnl codeend
mov esi,[chon1vatphambatkicotrongkho]
cmp [edx+4],esi
jne codeend
mov [hexvatphamtrongkho2],edx
jmp codeend
code3:
cmp [soluongvatpham],#0
cmp [chon1vatphambatkicotrongkho],#0
jng codeend
cmp [hexvatphamtrongkho2],#0
jne codeend
mov esi,[soluongvatpham]
cmp [edx+24],esi
jne codeend
mov esi,[hexvatphamtrongkho1]
cmp esi,edx
jng codeend
mov esi,[chon1vatphambatkicotrongkho]
cmp [edx+4],esi
jne codeend
mov [hexvatphamtrongkho2],edx
jmp codeend
codeend:
pop esi
code:
  mov eax,[edx]
  mov ecx,[edx+04]
  jmp return

itemhackvip:
  jmp newmem
return:
registersymbol(itemhackvip)
aobscanmodule(unlock_ham_lay_all_vp,libSandboxEngine.dll,66 0F 6E 40 08 83)
alloc(newmemdd,$1000)
label(codecc)
label(returnc)
newmemdd:
mov [eax+08],#2
codecc:
  movd xmm0,[eax+08]
  jmp returnc
unlock_ham_lay_all_vp:
  jmp newmemdd
returnc:
registersymbol(unlock_ham_lay_all_vp)
]=])
writeDouble("chon1vatphambatkicotrongkho-4",getProperty(UDF2_CEEdit30,"text"))
writeDouble("soluongvatpham-4",getProperty(UDF2_CEEdit31,"text"))
writeDouble("vatphamidok",getProperty(UDF2_CEEdit32,"text"))
end

function UDF2_CEButton30Click(sender)
UDF2_CEButton30.Visible=false
UDF2_CEButton29.Visible=true
writeDouble("vatphamidok",readDouble("chon1vatphambatkicotrongkho-4"))
writeDouble("[hexvatphamtrongkho1]+0",readDouble("chon1vatphambatkicotrongkho-4"))
writeDouble("[hexvatphamtrongkho2]+0",readDouble("chon1vatphambatkicotrongkho-4"))
sleep(1)
autoAssemble([=[{$asm}
{$lua}
if syntaxcheck then return end
aTimer.destroy()
writeDouble("vatphamidok",readDouble("chon1vatphambatkicotrongkho-4"))
writeDouble("[hexvatphamtrongkho1]+0",readDouble("chon1vatphambatkicotrongkho-4"))
writeDouble("[hexvatphamtrongkho2]+0",readDouble("chon1vatphambatkicotrongkho-4"))
aTimer=nil
{$asm}
itemhackvip:
  db 8B 02 8B 4A 04
unlock_ham_lay_all_vp:
  db 66 0F 6E 40 08
unregistersymbol(itemhackvip)
dealloc(newmem)
unregistersymbol(unlock_ham_lay_all_vp)
dealloc(newmemdd)
]=])
end


function UDF2_CEButton31Click(sender)
autoAssemble([=[{$asm}
alloc(tjzqID,4)
registersymbol(tjzqID)
tjzqID:
db 00
]=])
writeInteger("tjzqID",getProperty(UDF2_CEEdit33,"text"))
sleep(20)
autoAssemble([=[{$asm}
alloc(Draw,512)
createthread(Draw)
Draw:
pushad
push [tjzqID]//坐骑ID
mov ecx,[libSandboxEngine.g_pPlayerCtrl]
mov eax,libSandboxEngine.ClientPlayer::summonAccountHorse
call eax
popad
retn
]=])
sleep(20)
autoAssemble([=[{$asm}
dealloc(tjzqID)
unregistersymbol(tjzqID)
]=])
end


function UDF2_CEButton32Click(sender)
UDF2_CEButton32.Visible = false
UDF2_CEButton33.Visible = true
autoAssemble([=[{$asm}
alloc(cwID,4)
registersymbol(cwID)
alloc(cwTX,4)
registersymbol(cwTX)
alloc(cwDJ,4)
registersymbol(cwDJ)
cwID:
dd #10008
cwTX:
dd #5
cwDJ:
dd #3
]=])
writeInteger("cwID",getProperty(UDF2_CEEdit34,"text"))
writeInteger("cwTX",getProperty(UDF2_CEEdit35,"text"))
writeInteger("cwDJ",getProperty(UDF2_CEEdit36,"text"))
sleep(20)
autoAssemble([=[{$asm}
aobscanmodule(capoopet,libSandboxEngine.dll,83 EC ?? 8D 45 ?? 8B CC 50 E8 ?? ?? ?? ?? F2 0F 2C 4D ?? 8B 07) // should be unique
alloc(newmem,100)
label(returnhere)
newmem:
mov eax,[cwID]
mov [esp],eax
mov eax,[cwTX]
mov [esp+4],eax
mov eax,[cwDJ]
mov [esp+8],eax
db 83 EC 18
db 8D 45 C0
jmp returnhere
capoopet:
jmp newmem
nop
returnhere:
]=])
end

function UDF2_CEButton33Click(sender)
UDF2_CEButton32.Visible = true
UDF2_CEButton33.Visible = false
autoAssemble([=[{$asm}
dealloc(newmem)
capoopet:
db 83 EC 18
db 8D 45 C0
unregistersymbol(capoopet)
]=])
autoAssemble([=[{$asm}
dealloc(cwID)
unregistersymbol(cwID)
dealloc(cwDJ)
unregistersymbol(cwDJ)
dealloc(cwTX)
unregistersymbol(cwTX)
]=])
end

------------------------------------end------------------------------------
